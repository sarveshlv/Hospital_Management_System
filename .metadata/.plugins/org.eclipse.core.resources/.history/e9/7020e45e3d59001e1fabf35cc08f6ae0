package com.hms.hospitalms.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.hms.hospitalms.dto.AddHospitalRequest;
import com.hms.hospitalms.entities.Hospital;
import com.hms.hospitalms.service.IHospitalService;

import jakarta.validation.Valid;
import jakarta.validation.constraints.Digits;
import jakarta.validation.constraints.NotNull;

/**
 * HospitalController is responsible for handling HTTP requests related to
 * hospitals. It provides endpoints for adding, updating, deleting, and
 * verifying hospitals, as well as retrieving hospital details and checking if a
 * hospital is verified.
 */
@RestController
@RequestMapping("/api/hospitals")
public class HospitalController {

	@Autowired
	private IHospitalService hospitalService;

	/**
	 * Endpoint for adding a new hospital.
	 *
	 * @param addHospitalRequest The request body containing hospital information.
	 * @return The newly added hospital.
	 */
	@PostMapping("/add")
	public Hospital addHospital(@Valid @RequestBody AddHospitalRequest addHospitalRequest) {
		return hospitalService.addHospital(addHospitalRequest);
	}

	/**
	 * Endpoint for updating an existing hospital.
	 *
	 * @param id                 The ID of the hospital to be updated.
	 * @param addHospitalRequest The request body containing updated hospital
	 *                           information.
	 * @return The updated hospital.
	 */
	@PutMapping("/update/{id}")
	public Hospital updateHospital(@PathVariable String id, @Valid @RequestBody AddHospitalRequest addHospitalRequest) {
		return hospitalService.updateHospital(id, addHospitalRequest);
	}

	/**
	 * Endpoint for retrieving details of a hospital by its ID.
	 *
	 * @param id The ID of the hospital to retrieve.
	 * @return The hospital details.
	 */
	@GetMapping("/find/{id}")
	public Hospital getHospitalById(@PathVariable String id) {
		return hospitalService.findHospitalById(id);
	}

	/**
	 * Endpoint for deleting a hospital by its ID.
	 *
	 * @param id The ID of the hospital to delete.
	 * @return The deleted hospital.
	 */
	@DeleteMapping("/delete/{id}")
	public Hospital deleteHospitalById(@PathVariable String id) {
		return hospitalService.deleteHospitalById(id);
	}

	/**
	 * Endpoint for checking if a hospital is verified by its ID.
	 *
	 * @param id The ID of the hospital to check for verification status.
	 * @return True if the hospital is verified; otherwise, false.
	 */
	@GetMapping("/verified/{id}")
	public Boolean isHospitalVerified(@PathVariable String id) {
		return hospitalService.isHospitalVerified(id);
	}

	/**
	 * Endpoint for verifying a hospital by its ID.
	 *
	 * @param id The ID of the hospital to verify.
	 * @return The verified hospital.
	 */
	@PutMapping("/verify/{id}")
	public Hospital verifyHospital(@PathVariable String id) {
		return hospitalService.verifyHospital(id);
	}

	/**
	 * Endpoint for getting nearby hospitals by pincode.
	 *
	 * @param pincode of the area.
	 * @return list of hospitals in nearby area.
	 */
	@GetMapping("/nearby/{pincode}")
	public List<Hospital> getNearbyHospitals(
			@NotNull(message = "Pincode is required") @Digits(integer = 6, fraction = 0, message = "Pincode must be a 6-digit number") @PathVariable Long pincode) {
		return hospitalService.getNearbyHospitals(pincode);
	}
}