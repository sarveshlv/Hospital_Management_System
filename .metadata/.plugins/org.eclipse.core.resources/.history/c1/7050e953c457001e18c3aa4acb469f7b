/**
 * This class defines the RESTful API endpoints for managing beds in the Bed Management System (BedMS).
 * It handles operations such as adding, updating, retrieving, booking, unbooking, and searching for beds.
 * The controller uses the {@link BedService} to perform these operations.
 *
 * @author prateek
 */
package com.hms.bedms.controller;

import com.hms.bedms.dtos.AddBedRequest;
import com.hms.bedms.dtos.UpdateBedRequest;
import com.hms.bedms.entities.Bed;
import com.hms.bedms.exceptions.BedNotFoundException;
import com.hms.bedms.exceptions.HospitalNotFoundException;
import com.hms.bedms.service.BedService;

import jakarta.validation.Valid;
import jakarta.validation.constraints.Digits;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.HttpClientErrorException;

import java.util.List;

@RestController
@RequestMapping("/api/beds")
public class BedController {

    private final BedService bedService;

    @Autowired
    public BedController(BedService bedService) {
        this.bedService = bedService;
    }

    /**
     * Adds a new bed to the system based on the provided {@link AddBedRequest}.
     *
     * @param addBedRequest The request containing information about the new bed to be added.
     * @return The added bed.
     * @throws HospitalNotFoundException if the hospital specified in the request is not found.
     */
    @PostMapping("/add")
    public ResponseEntity<Bed> addBed(@Valid @RequestBody AddBedRequest addBedRequest) throws HospitalNotFoundException, HttpClientErrorException.NotFound, Exception {
    	return ResponseEntity.ok().body(bedService.addBed(addBedRequest));
    }

    /**
     * Updates the details of a bed based on the provided ID and {@link UpdateBedRequest}.
     *
     * @param id              The unique identifier of the bed to be updated.
     * @param updateBedRequest The request containing updated bed information.
     * @return The updated bed.
     * @throws BedNotFoundException if the bed with the specified ID is not found.
     */
    @PutMapping("/update/{id}")
    public ResponseEntity<Bed> updateBed(@PathVariable String id, @RequestBody UpdateBedRequest updateBedRequest)
            throws BedNotFoundException {
        return ResponseEntity.ok().body(bedService.updateBed(id, updateBedRequest));
    }

    /**
     * Retrieves a bed by its unique identifier.
     *
     * @param id The unique identifier of the bed to be retrieved.
     * @return The retrieved bed.
     * @throws BedNotFoundException if the bed with the specified ID is not found.
     */
    @GetMapping("/findById/{id}")
    public ResponseEntity<Bed> findBedById(@PathVariable String id) throws BedNotFoundException {
        return ResponseEntity.ok().body(bedService.findBedById(id));
    }

    /**
     * Retrieves a list of all beds in the system.
     *
     * @return A list of all beds.
     */
    @GetMapping("/findAll")
    public List<Bed> getAllBeds() {
        return bedService.getAllBeds();
    }

    /**
     * Retrieves a list of nearby beds based on the provided pincode.
     *
     * @param pincode The pincode used to find nearby beds.
     * @return A list of nearby beds.
     */
    @GetMapping("/findNearby/{pincode}")
    public ResponseEntity<List<Bed>> getNearbyBeds(@NotNull(message = "Pincode is required")
                                    @Digits(integer = 6, fraction = 0, message = "Pincode must be a 6-digit number")
                                    @PathVariable Long pincode) {
        return ResponseEntity.ok().body(bedService.getNearbyBeds(pincode));
    }

    /**
     * Retrieves a list of beds based on the specified bed type.
     *
     * @param bedType The type of beds to retrieve.
     * @return A list of beds of the specified type.
     */
    @GetMapping("/findByType/{bedType}")
    public ResponseEntity<List<Bed>> getBedsByType(
            @NotBlank(message = "Bed type is required")
            @Pattern(regexp = "USUAL_BED|ICU_BED|OXYGEN_BED|VENTILATOR_BED", message = "Invalid Bed type")
            @PathVariable String bedType) {
        return ResponseEntity.ok().body(bedService.getBedsByType(bedType));
    }

    /**
     * Retrieves a list of beds associated with a specific hospital based on the hospital's ID.
     *
     * @param hospitalId The unique identifier of the hospital.
     * @return A list of beds associated with the specified hospital.
     */
    @GetMapping("/findByHospital/{hospitalId}")
    public List<Bed> getBedsByHospitalId(@PathVariable String hospitalId) {
        return bedService.getBedsByHospitalId(hospitalId);
    }

    /**
     * Books a bed with the specified ID.
     *
     * @param id The unique identifier of the bed to be booked.
     * @return The booked bed.
     * @throws BedNotFoundException if the bed with the specified ID is not found.
     */
    @PostMapping("/bookBed/{id}")
    public Bed bookBed(@PathVariable String id) throws BedNotFoundException {
        return bedService.bookBed(id);
    }

    /**
     * Unbooks a bed with the specified ID.
     *
     * @param id The unique identifier of the bed to be unbooked.
     * @return The unbooked bed.
     * @throws BedNotFoundException if the bed with the specified ID is not found.
     */
    @PostMapping("/unbookBed/{id}")
    public Bed unbookBed(@PathVariable String id) throws BedNotFoundException {
        return bedService.unbookBed(id);
    }

    /**
     * Makes a bed with the specified ID available.
     *
     * @param id The unique identifier of the bed to be made available.
     * @return The bed marked as available.
     * @throws BedNotFoundException if the bed with the specified ID is not found.
     */
    @PostMapping("/makeBedAvailable/{id}")
    public Bed makeBedAvailable(@PathVariable String id) throws BedNotFoundException {
        return bedService.makeBedAvailable(id);
    }
}