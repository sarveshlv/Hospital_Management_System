package com.hms.hospitalms;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.hms.hospitalms.controller.CentralExceptionHandler;
import com.hms.hospitalms.controller.HospitalController;
import com.hms.hospitalms.dto.AddHospitalRequest;
import com.hms.hospitalms.entities.Hospital;
import com.hms.hospitalms.entities.Hospital.HospitalType;
import com.hms.hospitalms.exception.HospitalNotFoundException;
import com.hms.hospitalms.service.IHospitalService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

public class HospitalControllerTest {

    private MockMvc mockMvc;

    @Mock
    private IHospitalService hospitalService;

    @InjectMocks
    private HospitalController hospitalController;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        mockMvc = MockMvcBuilders.standaloneSetup(hospitalController)
                .setControllerAdvice(new CentralExceptionHandler())
                .build();
    }

    @Test
    void testAddHospital_ValidRequest() throws Exception {
        AddHospitalRequest request = createAddHospitalRequest();
        Hospital expectedHospital = createHospital();

        when(hospitalService.addHosiptal(any(AddHospitalRequest.class))).thenReturn(expectedHospital);

        mockMvc.perform(MockMvcRequestBuilders.post("/api/hospitals/add")
                .contentType(MediaType.APPLICATION_JSON)
                .content(asJsonString(request)))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.id").value(expectedHospital.getId()))
                .andExpect(jsonPath("$.name").value(expectedHospital.getName()));
    }

    @Test
    void testAddHospital_InvalidRequest() throws Exception {
        AddHospitalRequest request = new AddHospitalRequest();

        mockMvc.perform(MockMvcRequestBuilders.post("/api/hospitals/add")
                .contentType(MediaType.APPLICATION_JSON)
                .content(asJsonString(request)))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.name").value("Name is required"))
                .andExpect(jsonPath("$.hospitalType").value("Hospital type is required"))
                .andExpect(jsonPath("$.contactNo").value("Contact number is required"))
                .andExpect(jsonPath("$.address").value("Address is required"));
    }

    @Test
    void testUpdateHospital_ValidRequest() throws Exception {
        String hospitalId = "1";
        AddHospitalRequest request = createAddHospitalRequest();
        Hospital expectedHospital = createHospital();

        when(hospitalService.updateHospital(eq(hospitalId), any(AddHospitalRequest.class))).thenReturn(expectedHospital);

        mockMvc.perform(MockMvcRequestBuilders.put("/api/hospitals/update/{id}", hospitalId)
                .contentType(MediaType.APPLICATION_JSON)
                .content(asJsonString(request)))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.id").value(expectedHospital.getId()))
                .andExpect(jsonPath("$.name").value(expectedHospital.getName()));
    }

    @Test
    void testUpdateHospital_InvalidRequest() throws Exception {
        String hospitalId = "1";
        AddHospitalRequest request = new AddHospitalRequest(); // Empty request

        mockMvc.perform(MockMvcRequestBuilders.put("/api/hospitals/update/{id}", hospitalId)
                .contentType(MediaType.APPLICATION_JSON)
                .content(asJsonString(request)))
                .andExpect(status().isBadRequest())
                .andExpect(jsonPath("$.name").value("Name is required"))
                .andExpect(jsonPath("$.hospitalType").value("Hospital type is required"))
                .andExpect(jsonPath("$.contactNo").value("Contact number is required"))
                .andExpect(jsonPath("$.address").value("Address is required"));
    }

    // Add more test cases for other controller methods following a similar pattern

    private static AddHospitalRequest createAddHospitalRequest() {
        AddHospitalRequest request = new AddHospitalRequest();
        request.setName("Apollo Hospital");
        request.setHospitalType("PRIVATE");
        request.setContactNo(7270043813L);
        request.setAddress(new Hospital.Address("Lucknow", "Uttar Pradesh", 226022L));
        return request;
    }

    private static Hospital createHospital() {
		Hospital hospital = new Hospital();
		hospital.setId("1");
		hospital.setName("Apollo Hospital");
		hospital.setHospitalType(HospitalType.PRIVATE);
		hospital.setContactNo(7270043813L);
		hospital.setAddress(new Hospital.Address("City", "Uttar Pradesh", 226022L));
		return hospital;
	}

    @Test
    void testGetHospitalById_ValidId() throws Exception {
        String hospitalId = "1";
        Hospital expectedHospital = createHospital();

        when(hospitalService.findHospitalById(eq(hospitalId))).thenReturn(expectedHospital);

        mockMvc.perform(MockMvcRequestBuilders.get("/api/hospitals/find/{id}", hospitalId)
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.id").value(expectedHospital.getId()))
                .andExpect(jsonPath("$.name").value(expectedHospital.getName()));
    }

    @Test
    void testGetHospitalById_InvalidId() throws Exception {
        String id = "invalid-id";

        when(hospitalService.findHospitalById(eq(id))).thenThrow(new HospitalNotFoundException(id));

        mockMvc.perform(MockMvcRequestBuilders.get("/api/hospitals/find/{id}", id)
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isNotFound());
//                .andExpect(jsonPath("$.message").value("Hospital not found for : " + id));
    }

    @Test
    void testDeleteHospitalById_ValidId() throws Exception {
        String hospitalId = "1";
        Hospital expectedHospital = createHospital();

        when(hospitalService.deleteHospitalById(eq(hospitalId))).thenReturn(expectedHospital);

        mockMvc.perform(MockMvcRequestBuilders.delete("/api/hospitals/delete/{id}", hospitalId)
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.id").value(expectedHospital.getId()))
                .andExpect(jsonPath("$.name").value(expectedHospital.getName()));
    }

    @Test
    void testDeleteHospitalById_InvalidId() throws Exception {
        String id = "invalid-id"; // Invalid ID format

        when(hospitalService.deleteHospitalById(eq(id))).thenThrow(new HospitalNotFoundException(id));

        mockMvc.perform(MockMvcRequestBuilders.delete("/api/hospitals/delete/{id}", id)
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isNotFound());
//                .andExpect(jsonPath("$.message").value("Hospital not found for : " + id));
    }

    @Test
    void testIsHospitalVerified_ValidId() throws Exception {
        String hospitalId = "1";

        when(hospitalService.isHospitalVerfied(eq(hospitalId))).thenReturn(true);

        mockMvc.perform(MockMvcRequestBuilders.get("/api/hospitals/verified/{id}", hospitalId)
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(content().string("true"));
    }

    @Test
    void testIsHospitalVerified_InvalidId() throws Exception {
        String id = "invalid-id"; // Invalid ID format

        when(hospitalService.isHospitalVerfied(eq(id))).thenThrow(new HospitalNotFoundException(id));

        mockMvc.perform(MockMvcRequestBuilders.get("/api/hospitals/verified/{id}", id)
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isNotFound());
//                .andExpect(jsonPath("$.message").value("Hospital not found for : " + id));
    }

    @Test
    void testVerifyHospital_ValidId() throws Exception {
        String hospitalId = "1";
        Hospital expectedHospital = createHospital();
        expectedHospital.setVerified(true);

        when(hospitalService.verifyHospital(eq(hospitalId))).thenReturn(expectedHospital);

        mockMvc.perform(MockMvcRequestBuilders.post("/api/hospitals/verify/{id}", hospitalId)
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.id").value(expectedHospital.getId()))
                .andExpect(jsonPath("$.name").value(expectedHospital.getName()))
                .andExpect(jsonPath("$.verified").value(true));
    }

    @Test
    void testVerifyHospital_InvalidId() throws Exception {
        String id = "invalid-id"; // Invalid ID format

        when(hospitalService.verifyHospital(eq(id))).thenThrow(new HospitalNotFoundException(id));

        mockMvc.perform(MockMvcRequestBuilders.post("/api/hospitals/verify/{id}", id)
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isNotFound());
//                .andExpect(jsonPath("$.message").value("Hospital not found for : " + id));
    }

    // Helper method to convert objects to JSON string
    private static String asJsonString(final Object obj) {
        try {
            return new ObjectMapper().writeValueAsString(obj);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}