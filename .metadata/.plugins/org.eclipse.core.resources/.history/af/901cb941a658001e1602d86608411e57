package com.hms.bookingms.service;

import java.util.List;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

import com.hms.bookingms.entities.Booking.BedType;
import com.hms.bedms.dtos.Hospital;
import com.hms.bookingms.dto.Bed;

@Component
public class BedApiSevice {

	@Autowired
	private RestTemplate restTemplate;

	public boolean bookBed(String bedId) {
		String bookBedUrl = "http://localhost:8080/api/beds/find/" + bedId;
		try {
			ResponseEntity<Void> responseEntity = restTemplate.getForEntity(bookBedUrl, Void.class);
			return responseEntity.getStatusCode() == HttpStatus.OK;
		} catch (HttpClientErrorException.NotFound e) {
			return false;
		} catch (Exception e) {
			throw new RuntimeException("Error while booking bed: " + e.getMessage());
		}
	}

	public boolean cancelBedBooking(String bedId) {
		String bookBedUrl = "http://localhost:8080/api/beds/find/" + bedId;
		try {
			ResponseEntity<Void> responseEntity = restTemplate.getForEntity(bookBedUrl, Void.class);
			return responseEntity.getStatusCode() == HttpStatus.OK;
		} catch (HttpClientErrorException.NotFound e) {
			return false;
		} catch (Exception e) {
			throw new RuntimeException("Error while checking if Patient exists: " + e.getMessage());
		}
	}

	public String getRandomBedId(BedType bedType) {
		String getBedsByType = "http://localhost:8080/api/beds/findByType/" + bedType;
		try {
			ResponseEntity<List<Bed>> responseEntity = restTemplate.exchange(getBedsByType, HttpMethod.GET, null,
					new ParameterizedTypeReference<List<Bed>>() {
					});
			List<Bed> beds = responseEntity.getBody();
			if (beds.isEmpty()) {
				throw new Exception();
			}
			int randomIndex = new Random().nextInt(beds.size());
			Bed randomBed = beds.get(randomIndex);
			return randomBed.getId();
		} catch (HttpClientErrorException.NotFound e) {
			throw new RuntimeException("Error while checking if Patient exists: " + e.getMessage());
		} catch (Exception e) {
			throw new RuntimeException("Error while checking if Patient exists: " + e.getMessage());
		}
	}
}