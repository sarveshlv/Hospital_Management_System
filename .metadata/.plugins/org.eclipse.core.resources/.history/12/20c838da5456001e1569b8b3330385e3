package com.hms.bedms.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

import com.hms.bedms.dtos.AddBedRequest;
import com.hms.bedms.dtos.Hospital;
import com.hms.bedms.dtos.UpdateBedRequest;
import com.hms.bedms.entities.Bed;
import com.hms.bedms.entities.Bed.BedStatus;
import com.hms.bedms.entities.Bed.BedType;
import com.hms.bedms.exceptions.BedNotFoundException;
import com.hms.bedms.exceptions.HospitalNotFoundException;
import com.hms.bedms.repository.BedRepository;

@Service
public class BedService implements IBedService {

	@Autowired
	private RestTemplate restTemplate;

	@Autowired
	private BedRepository bedRepository;

	public boolean isHospitalFound(String hospitalId) throws HospitalNotFoundException {
		String checkHospitalUrl = "http://localhost:8080/api/hospitals/find/" + hospitalId;
		try {
			Hospital hospital = restTemplate.getForObject(checkHospitalUrl, Hospital.class);
			return hospital != null;
		} catch (HttpClientErrorException.NotFound e) {
			return false;
		} catch (Exception e) {
			throw new RuntimeException("Error while checking if hospital exists: " + e.getMessage());
		}
	}

	public List<Hospital> getNearbyHospitals(Long pincode) {
		String nearbyHospitalsUrl = "http://localhost:8080/api/hospitals/nearby/" + pincode;
		
		ResponseEntity<List<Hospital>> responseEntity = restTemplate.exchange(nearbyHospitalsUrl, 
				HttpMethod.GET, 
				null,
				new ParameterizedTypeReference<List<Hospital>>() {
				});
		return responseEntity.getBody();

	}

	@Override
	public Bed addBed(AddBedRequest addBedRequest) throws HospitalNotFoundException {
		String hospitalId = addBedRequest.getHospitalId();

		if (!isHospitalFound(hospitalId)) {
			throw new HospitalNotFoundException(hospitalId);
		}

		Bed bed = new Bed();
		bed.setHospitalId(hospitalId);
		bed.setBedType(BedType.valueOf(addBedRequest.getBedType()));
		bed.setBedStatus(BedStatus.AVAILABLE);
		bed.setCostPerDay(addBedRequest.getCostPerDay());

		return bedRepository.save(bed);
	}

	@Override
	public Bed updateBed(String id, UpdateBedRequest updateBedRequest) throws BedNotFoundException {
		Bed bed = findBedById(id);

		bed.setBedType(BedType.valueOf(updateBedRequest.getBedType()));
		bed.setCostPerDay(updateBedRequest.getCostPerDay());

		return bedRepository.save(bed);
	}

	@Override
	public Bed findBedById(String id) throws BedNotFoundException {
		return bedRepository.findById(id).orElseThrow(() -> new BedNotFoundException(id));
	}

	@Override
	public List<Bed> getAllBeds() {
		return bedRepository.findAll();
	}

	@Override
	public List<Bed> getNearbyBeds(Long pincode) {
		List<Bed> beds = new ArrayList<>();
		List<Hospital> nearbyHospitals = getNearbyHospitals(pincode);
		for (Hospital hospital : nearbyHospitals) {
			String hospitalId = hospital.getId();
			beds.addAll(getBedsByHospitalId(hospitalId));
		}
		return beds;
	}

	@Override
	public List<Bed> getBedsByType(String bedType) {
		return bedRepository.findByBedType(bedType);
	}

	@Override
	public List<Bed> getBedsByHospitalId(String hospitalId) {
		return bedRepository.findByHospitalId(hospitalId);
	}

	@Override
	public Bed bookBed(String id) throws BedNotFoundException {
		Bed bed = findBedById(id);
		bed.setBedStatus(BedStatus.BOOKED);
		return bedRepository.save(bed);
	}

	@Override
	public Bed unbookBed(String id) throws BedNotFoundException {
		Bed bed = findBedById(id);
		bed.setBedStatus(BedStatus.CANCELLED);
		return bedRepository.save(bed);
	}

	@Override
	public Bed makeBedAvailable(String id) throws BedNotFoundException {
		Bed bed = findBedById(id);
		bed.setBedStatus(BedStatus.AVAILABLE);
		return bedRepository.save(bed);
	}

}
