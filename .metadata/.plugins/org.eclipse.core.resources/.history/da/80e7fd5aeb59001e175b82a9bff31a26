package com.hms.authms.controller;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.web.bind.annotation.*;

import com.hms.authms.dto.UpdateUserRequest;
import com.hms.authms.dto.UserDetailsResponse;
import com.hms.authms.service.UserService;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/api/users")
public class UserController {
	
	@Autowired
    private UserService userService;
	
    @PreAuthorize("hasAnyRole('MANAGER','USER')")
    @PutMapping("/update")
    public ResponseEntity<UserDetailsResponse> updateUser(@Valid @RequestBody UpdateUserRequest updateUserRequest)
            throws UsernameNotFoundException {
        UserDetailsResponse userDetails = userService.updateUser(updateUserRequest);
        return ResponseEntity.ok(userDetails);
    }

    @GetMapping("/findByEmail/{email}")
    public ResponseEntity<UserDetailsResponse> getUserByEmail(@Valid @PathVariable String email)
            throws UsernameNotFoundException {
        UserDetailsResponse userDetails = userService.getUserDetailsByEmail(email);
        return ResponseEntity.ok(userDetails);
    }
    
    @GetMapping("/addReference/{referenceId}")
    public ResponseEntity<UserDetailsResponse> addReference(@PathVariable String referenceId){
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		String email = authentication.getName().toString();
    	UserDetailsResponse userDetails = userService.addReferenceId(email, referenceId);
    	return ResponseEntity.ok(userDetails);
    }
}