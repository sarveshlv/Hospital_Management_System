package com.hms.bedms.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.hms.bedms.dtos.AddBedRequest;
import com.hms.bedms.entities.Bed;
import com.hms.bedms.dtos.UpdateBedRequest;
import com.hms.bedms.exceptions.BedNotFoundException;
import com.hms.bedms.exceptions.HospitalNotFoundException;
import com.hms.bedms.service.BedService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import java.util.ArrayList;
import java.util.List;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@WebMvcTest(BedController.class)
public class BedsControllerTestT {

	@Autowired
	private MockMvc mockMvc;

	@Autowired
	private ObjectMapper objectMapper;

	@MockBean
	private BedService bedService;

	private Bed testBed;

	@BeforeEach
	void setUp() {
		// Initialize a test Bed object for use in the test cases
		testBed = new Bed();
		testBed.setId("1");
		testBed.setHospitalId("hospital123");
		testBed.setBedType(Bed.BedType.USUAL_BED);
		testBed.setCostPerDay(100.0);
	}

	@Test
	void testAdd_ValidBed() throws Exception {
		// Arrange
		AddBedRequest addBedRequest = new AddBedRequest();
		addBedRequest.setHospitalId("hospital123");
		addBedRequest.setBedType("USUAL_BED");
		addBedRequest.setCostPerDay(100.0);

		Mockito.when(bedService.addBed(any(AddBedRequest.class))).thenReturn(testBed);

		// Act and Assert
		mockMvc.perform(MockMvcRequestBuilders.post("/api/beds/add")
				.contentType(MediaType.APPLICATION_JSON)
				.content(objectMapper.writeValueAsString(addBedRequest)))
				.andExpect(status().isOk())
				.andExpect(content().contentType(MediaType.APPLICATION_JSON))
				.andExpect(jsonPath("$.id").value("1"))
				.andExpect(jsonPath("$.hospitalId").value("hospital123"))
				.andExpect(jsonPath("$.bedType").value("USUAL_BED"))
				.andExpect(jsonPath("$.costPerDay").value(100.0));
	}

	@Test
	public void testAdd_InvalidBedWithMissingHospitalId() throws Exception {
		AddBedRequest addBedRequest = new AddBedRequest();
		addBedRequest.setBedType("USUAL_BED");
		addBedRequest.setCostPerDay(100.0);

		mockMvc.perform(MockMvcRequestBuilders.post("/api/beds/add")
				.contentType(MediaType.APPLICATION_JSON)
				.content(objectMapper.writeValueAsString(addBedRequest)))
				.andExpect(status().isBadRequest())
				.andExpect(jsonPath("$.hospitalId").value("Hospital id is required"));
	}

	@Test
	public void testAdd_InvalidBedWithInvalidBedType() throws Exception {
		AddBedRequest addBedRequest = new AddBedRequest();
		addBedRequest.setBedType("INVALID_BED");
		addBedRequest.setCostPerDay(100.0);

		mockMvc.perform(MockMvcRequestBuilders.post("/api/beds/add")
				.contentType(MediaType.APPLICATION_JSON)
				.content(objectMapper.writeValueAsString(addBedRequest)))
				.andExpect(status().isBadRequest())
				.andExpect(jsonPath("$.bedType").value("Invalid Bed type"));
	}

	@Test
	public void testAdd_InvalidBedWithNegativeCostPerDay() throws Exception {
		// Arrange
		AddBedRequest addBedRequest = new AddBedRequest();
		addBedRequest.setHospitalId("hospital123");
		addBedRequest.setBedType("INVALID_BED");
		addBedRequest.setCostPerDay(-100.0);

		mockMvc.perform(MockMvcRequestBuilders.post("/api/beds/add")
				.contentType(MediaType.APPLICATION_JSON)
				.content(objectMapper.writeValueAsString(addBedRequest)))
				.andExpect(status().isBadRequest())
				.andExpect(jsonPath("$.costPerDay").value("Cost per day must be a positive number"));
	}
	
}
