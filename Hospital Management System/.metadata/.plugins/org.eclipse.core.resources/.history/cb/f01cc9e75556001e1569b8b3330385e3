package com.hms.bedms.service;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import com.hms.bedms.dtos.AddBedRequest;
import com.hms.bedms.dtos.UpdateBedRequest;
import com.hms.bedms.entities.Bed;
import com.hms.bedms.exceptions.BedNotFoundException;
import com.hms.bedms.exceptions.HospitalNotFoundException;
import com.hms.bedms.repository.BedRepository;

public class BedServiceTest {

	@Mock
	private BedRepository bedRepository;

	@Mock
	private HospitalApiService hospitalApiService;
	@InjectMocks
	private BedService bedService;

	@BeforeEach
	void setup() {
		MockitoAnnotations.openMocks(this);
	}

	@Test
	public void testAddBed_ValidHospital() {
		// Arrange
		Bed savedBed = createBed();

		AddBedRequest addBedRequest = new AddBedRequest();
		addBedRequest.setHospitalId("1");
		addBedRequest.setBedType("USUAL_BED");
		addBedRequest.setCostPerDay(25.0);

		when(hospitalApiService.isHospitalFound("1")).thenReturn(true);

		when(bedRepository.save(any(Bed.class))).thenReturn(savedBed);

		// Act
		Bed result = bedService.addBed(addBedRequest);

		// Assert
		assertEquals(savedBed, result);
//        assertNotNull(result);
//        
//        assertEquals("hospital123", result.getHospitalId());
//        assertEquals(Bed.BedType.USUAL_BED, result.getBedType());
//        assertEquals(Bed.BedStatus.AVAILABLE, result.getBedStatus());
//        assertEquals(100.0, result.getCostPerDay());
	}

	@Test
	public void testAddBed_HospitalNotFound() {
		// Arrange
		AddBedRequest addBedRequest = new AddBedRequest();
		addBedRequest.setHospitalId("nonexistentHospital");
		addBedRequest.setBedType("USUAL_BED");
		addBedRequest.setCostPerDay(100.0);

		when(hospitalApiService.isHospitalFound("nonexistentHospital")).thenReturn(false);

		// Act and Assert
		assertThrows(HospitalNotFoundException.class, () -> bedService.addBed(addBedRequest));
	}

	@Test
	public void testUpdateBed_ValidBedId() throws BedNotFoundException {
		Bed existingBed = createBed();

		when(bedRepository.findById("1")).thenReturn(Optional.of(existingBed));
		when(bedRepository.save(existingBed)).thenReturn(existingBed);

		UpdateBedRequest updateRequest = new UpdateBedRequest("USUAL_BED", 100.0);

		existingBed.setBedType(Bed.BedType.USUAL_BED);
		existingBed.setCostPerDay(100.0);

		assertEquals(existingBed, bedService.updateBed("1", updateRequest));
	}

	@Test
	public void testUpdateBed_BedIdNotFound() {
		UpdateBedRequest updateRequest = new UpdateBedRequest("USUAL_BED", 100.0);

		when(bedRepository.findById("1")).thenReturn(Optional.empty());

		assertThrows(BedNotFoundException.class, () -> bedService.updateBed("1", updateRequest));
	}

	@Test
	public void testFindBedById_ValidBedId() throws BedNotFoundException {
		Bed expectedBed = createBed();

		when(bedRepository.findById("1")).thenReturn(Optional.of(expectedBed));

		assertEquals(expectedBed, bedService.findBedById("1"));
	}

	@Test
	public void testFindBedById_BedIdNotFound() {
		when(bedRepository.findById("1")).thenReturn(Optional.empty());

		assertThrows(BedNotFoundException.class, () -> bedService.findBedById("1"));
	}

	@Test
	public void testGetAllBeds() {
		Bed bed1 = createBed();
		bed1.setId("1");

		Bed bed2 = createBed();
		bed2.setId("2");

		List<Bed> allBeds = new ArrayList<>();
		allBeds.add(bed1);
		allBeds.add(bed2);

		when(bedRepository.findAll()).thenReturn(allBeds);

		assertEquals(allBeds, bedService.getAllBeds());
	}

	@Test
	public void testGetBedsByType_ValidBedType() {
		Bed bed = createBed();
		bed.setBedType(Bed.BedType.USUAL_BED);

		List<Bed> expectedBeds = new ArrayList<>();
		expectedBeds.add(bed);

		when(bedRepository.save(bed)).thenReturn(bed);
		when(bedRepository.findByBedType("USUAL_BED")).thenReturn(expectedBeds);

		assertEquals(expectedBeds, bedService.getBedsByType("USUAL_BED"));
	}

	@Test
	public void testGetBedsByType_InvalidBedType() {
		String bedType = "INVALID_BED_TYPE";

		when(bedRepository.findByBedType(bedType)).thenReturn(new ArrayList<>());
		assertTrue(bedService.getBedsByType(bedType).isEmpty());
	}

	@Test
	public void testGetBedsByHospitalId_ValidHospitalId() {
		Bed bed = createBed();

		List<Bed> expectedBeds = new ArrayList<>();
		expectedBeds.add(bed);

		when(bedRepository.save(bed)).thenReturn(bed);
		when(bedRepository.findByHospitalId("1")).thenReturn(expectedBeds);

		assertEquals(expectedBeds, bedService.getBedsByHospitalId("1"));
	}

	@Test
	public void testGetBedsByHospitalId_HospitalIdNotFound() {
		Bed bed = createBed();

		when(bedRepository.save(bed)).thenReturn(bed);

		List<Bed> expectedBeds = new ArrayList<>();
		expectedBeds.add(bed);

		when(bedRepository.findByHospitalId("2")).thenReturn(new ArrayList<>());
		assertTrue(bedService.getBedsByHospitalId("2").isEmpty());
	}

	@Test
	public void testBookBed_ValidBedId() {
		Bed bed = createBed();
		bed.setBedStatus(Bed.BedStatus.AVAILABLE);

		when(bedRepository.findById("1")).thenReturn(Optional.of(bed));
		when(bedRepository.save(bed)).thenReturn(bed);

		assertEquals(Bed.BedStatus.BOOKED, bedService.bookBed("1").getBedStatus());
	}

	@Test
	public void testBookBed_BedIdNotFound() {
		String bedId = "1";

		when(bedRepository.findById(bedId)).thenReturn(Optional.empty());
		assertThrows(BedNotFoundException.class, () -> bedService.bookBed(bedId));
	}

	@Test
	public void testUnbookBed_ValidBedId() {
		Bed bed = createBed();
		bed.setBedStatus(Bed.BedStatus.BOOKED);

		when(bedRepository.findById("1")).thenReturn(Optional.of(bed));
		when(bedRepository.save(bed)).thenReturn(bed);

		assertEquals(Bed.BedStatus.CANCELLED, bedService.unbookBed("1").getBedStatus());
	}

	@Test
	public void testUnbookBed_BedIdNotFound() {
		String bedId = "1";

		when(bedRepository.findById(bedId)).thenReturn(Optional.empty());
		assertThrows(BedNotFoundException.class, () -> bedService.unbookBed(bedId));
	}

	@Test
	public void testMakeBedAvailable_ValidBedId() {
		Bed bed = createBed();
		bed.setBedStatus(Bed.BedStatus.CANCELLED);

		when(bedRepository.findById("1")).thenReturn(Optional.of(bed));
		when(bedRepository.save(bed)).thenReturn(bed);

		assertEquals(Bed.BedStatus.AVAILABLE, bedService.makeBedAvailable("1").getBedStatus());
	}

	@Test
	public void testMakeBedAvailable_BedIdNotFound() {
		String bedId = "1";

		when(bedRepository.findById(bedId)).thenReturn(Optional.empty());
		assertThrows(BedNotFoundException.class, () -> bedService.makeBedAvailable(bedId));
	}

	public Bed createBed() {
		Bed bed = new Bed();
		bed.setId("1");
		bed.setHospitalId("1");
		bed.setBedType(Bed.BedType.USUAL_BED);
		bed.setBedStatus(Bed.BedStatus.AVAILABLE);
		bed.setCostPerDay(25.0);
		return bed;
	}
}