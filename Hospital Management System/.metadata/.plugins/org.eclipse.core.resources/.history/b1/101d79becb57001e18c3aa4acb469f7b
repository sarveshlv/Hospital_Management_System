package com.hms.bedms.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.List;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.hms.bedms.dtos.AddBedRequest;
import com.hms.bedms.dtos.UpdateBedRequest;
import com.hms.bedms.entities.Bed;
import com.hms.bedms.exceptions.BedNotFoundException;
import com.hms.bedms.exceptions.HospitalNotFoundException;
import com.hms.bedms.service.BedService;

public class BedControllerTest {

	private MockMvc mockMvc;

	@InjectMocks
	private BedController bedController;
	
	@InjectMocks
    private CentralExceptionHandler bedsController;

	@Mock
	private BedService bedService;

	@BeforeEach
	public void setup() {
		MockitoAnnotations.openMocks(this);
		mockMvc = MockMvcBuilders.standaloneSetup(bedsController)
                .setControllerAdvice(new CentralExceptionHandler())
                .build();
	}

	@Test
	public void testAdd_ValidBed() throws HospitalNotFoundException {
		// Arrange
		AddBedRequest addBedRequest = new AddBedRequest();
		addBedRequest.setHospitalId("hospital123");
		addBedRequest.setBedType("USUAL_BED");
		addBedRequest.setCostPerDay(100.0);

		Bed addedBed = new Bed();
		addedBed.setHospitalId("hospital123");
		addedBed.setBedType(Bed.BedType.USUAL_BED);
		addedBed.setCostPerDay(100.0);

		when(bedService.addBed(any(AddBedRequest.class))).thenReturn(addedBed);

		// Act
		ResponseEntity<Bed> response = bedController.addBed(addBedRequest);

		// Assert
		assertEquals(HttpStatus.OK, response.getStatusCode());
		assertNotNull(response.getBody());
		assertEquals(response.getBody(), addedBed);
	}

	
	@Test
	public void testAdd_InvalidBedWithMissingHospitalId() throws Exception {
		AddBedRequest addBedRequest = new AddBedRequest();
		addBedRequest.setBedType("USUAL_BED");
		addBedRequest.setCostPerDay(100.0);
	
		mockMvc.perform(MockMvcRequestBuilders.post("/api/beds/add")
				.contentType(MediaType.APPLICATION_JSON).content(asJsonString(addBedRequest)))
				.andExpect(status().isNotFound());
//				.andExpect(jsonPath("$.hospitalId").value("Hospital id is required"));
	}

	@Test
	public void testAdd_InvalidBedWithInvalidBedType() throws Exception{
		AddBedRequest addBedRequest = new AddBedRequest();
		addBedRequest.setBedType("INVALID_BED");
		addBedRequest.setCostPerDay(100.0);
		
		mockMvc.perform(MockMvcRequestBuilders.post("/api/beds/add")
				.contentType(MediaType.APPLICATION_JSON).content(asJsonString(addBedRequest)))
				.andExpect(status().isNotFound());
//				.andExpect(jsonPath("$.bedType").value("Invalid Bed type"));
	}

	@Test
	public void testAdd_InvalidBedWithNegativeCostPerDay() {
		// Arrange
		AddBedRequest addBedRequest = new AddBedRequest();
		addBedRequest.setHospitalId("hospital123");
		addBedRequest.setBedType("USUAL_BED");
		addBedRequest.setCostPerDay(-100.0);

		// Act
		ResponseEntity<Bed> response = bedController.addBed(addBedRequest);

		// Assert
		assertEquals(HttpStatus.BAD_REQUEST, response.getStatusCode());
	}

	@Test
	public void testUpdate_ValidBed() throws BedNotFoundException {
		// Arrange
		String bedId = "bed123";
		UpdateBedRequest updateBedRequest = new UpdateBedRequest();
		updateBedRequest.setBedType("ICU_BED");
		updateBedRequest.setCostPerDay(200.0);

		Bed existingBed = new Bed();
		existingBed.setId(bedId);
		existingBed.setHospitalId("hospital123");
		existingBed.setBedType(Bed.BedType.USUAL_BED);
		existingBed.setCostPerDay(100.0);

		when(bedService.findBedById(bedId)).thenReturn(existingBed);
		when(bedService.updateBed(eq(bedId), any(UpdateBedRequest.class))).thenReturn(existingBed);

		// Act
		ResponseEntity<Bed> response = bedController.updateBed(bedId, updateBedRequest);

		// Assert
		assertEquals(HttpStatus.OK, response.getStatusCode());
		assertNotNull(response.getBody());
		assertEquals(response.getBody(), existingBed);
	}

	@Test
	public void testUpdate_InvalidBedWithInvalidBedType() {
		// Arrange
		
		String bedId = "bed123";
		UpdateBedRequest updateBedRequest = new UpdateBedRequest();
		updateBedRequest.setBedType("INVALID_TYPE");
		updateBedRequest.setCostPerDay(200.0);

		Bed existingBed = new Bed();
		existingBed.setId(bedId);
		existingBed.setHospitalId("hospital123");
		existingBed.setBedType(Bed.BedType.USUAL_BED);
		existingBed.setCostPerDay(100.0);

		when(bedService.findBedById(bedId)).thenReturn(existingBed);

		// Act
		ResponseEntity<Bed> response = bedController.updateBed(bedId, updateBedRequest);

		// Assert
		assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
	}

	@Test
	void testUpdateBed_forInvalidBedRequest() throws Exception {
		// Arrange: Prepare an invalid UpdateBedRequest with missing fields.
		UpdateBedRequest request = new UpdateBedRequest(); 
		
		// Empty request
		String bedId = "1"; // Replace with a valid bed ID

		// Act: Perform a PUT request to update a bed and validate the response for
		// errors.
		mockMvc.perform(MockMvcRequestBuilders.put("/api/beds/update/{id}", bedId)
				.contentType(MediaType.APPLICATION_JSON).content(asJsonString(request)))
				.andExpect(status().isNotFound());
//				.andExpect(jsonPath("$.hospitalId").value("Hospital id is required"))
//				.andExpect(jsonPath("$.bedType").value("Invalid Bed type"))
//				.andExpect(jsonPath("$.costPerDay").value("Cost per day must be a positive number"));
	}

	@Test
	public void testFindBedById_Valid() throws BedNotFoundException {
		// Arrange
		String bedId = "bed123";
		Bed existingBed = new Bed();
		existingBed.setId(bedId);
		existingBed.setHospitalId("hospital123");
		existingBed.setBedType(Bed.BedType.USUAL_BED);
		existingBed.setCostPerDay(100.0);

		when(bedService.findBedById(bedId)).thenReturn(existingBed);

		// Act
		ResponseEntity<Bed> response = bedController.findBedById(bedId);

		// Assert
		assertEquals(HttpStatus.OK, response.getStatusCode());
		assertNotNull(response.getBody());
		assertEquals(bedId, response.getBody().getId());
		assertEquals(Bed.BedType.USUAL_BED, response.getBody().getBedType());
		assertEquals(100.0, response.getBody().getCostPerDay());
	}

	@Test
	public void testFindBedById_NotFound() {
		// Arrange
		String bedId = "bed123";

		when(bedService.findBedById(bedId)).thenThrow(new BedNotFoundException(bedId));

		// Act
		ResponseEntity<Bed> response = bedController.findBedById(bedId);

		// Assert
		assertEquals(HttpStatus.NOT_FOUND, response.getStatusCode());
	}

	@Test
	public void testGetNearbyBeds_Valid() {
		// Arrange
		Long pincode = 123456L;
		List<Bed> nearbyBeds = List.of(new Bed(), new Bed());

		when(bedService.getNearbyBeds(pincode)).thenReturn(nearbyBeds);

		// Act
		ResponseEntity<List<Bed>> response = bedController.getNearbyBeds(pincode);

		// Assert
		assertEquals(HttpStatus.OK, response.getStatusCode());
		assertNotNull(response.getBody());
		assertEquals(2, response.getBody().size());
	}

	@Test
	public void testGetBedsByType_Valid() {
		// Arrange
		String bedType = "USUAL_BED";
		List<Bed> bedsByType = List.of(new Bed(), new Bed());

		when(bedService.getBedsByType(bedType)).thenReturn(bedsByType);

		// Act
		ResponseEntity<List<Bed>> response = bedController.getBedsByType(bedType);

		// Assert
		assertEquals(HttpStatus.OK, response.getStatusCode());
		assertNotNull(response.getBody());
		assertEquals(2, response.getBody().size());
	}

	@Test
	public void testGetBedsByHospitalId_Valid() {
		// Arrange
		String hospitalId = "hospital123";
		List<Bed> bedsByHospital = List.of(new Bed(), new Bed());

		when(bedService.getBedsByHospitalId(hospitalId)).thenReturn(bedsByHospital);

		// Act
		ResponseEntity<List<Bed>> response = bedController.getBedsByHospitalId(hospitalId);

		// Assert
		assertEquals(HttpStatus.OK, response.getStatusCode());
		assertNotNull(response.getBody());
		assertEquals(2, response.getBody().size());
	}

	@Test
	public void testBookBed_Valid() throws BedNotFoundException {
		// Arrange
		String bedId = "bed123";
		Bed bookedBed = new Bed();
		bookedBed.setId(bedId);
		bookedBed.setBedStatus(Bed.BedStatus.BOOKED);

		when(bedService.bookBed(bedId)).thenReturn(bookedBed);

		// Act
		ResponseEntity<Bed> response = bedController.bookBed(bedId);

		// Assert
		assertEquals(HttpStatus.OK, response.getStatusCode());
		assertNotNull(response.getBody());
		assertEquals(bedId, response.getBody().getId());
		assertEquals(Bed.BedStatus.BOOKED, response.getBody().getBedStatus());
	}

	@Test
	public void testUnbookBed_Valid() throws BedNotFoundException {
		// Arrange
		String bedId = "bed123";
		Bed unbookedBed = new Bed();
		unbookedBed.setId(bedId);
		unbookedBed.setBedStatus(Bed.BedStatus.AVAILABLE);

		when(bedService.unbookBed(bedId)).thenReturn(unbookedBed);

		// Act
		ResponseEntity<Bed> response = bedController.unbookBed(bedId);

		// Assert
		assertEquals(HttpStatus.OK, response.getStatusCode());
		assertNotNull(response.getBody());
		assertEquals(bedId, response.getBody().getId());
		assertEquals(Bed.BedStatus.AVAILABLE, response.getBody().getBedStatus());
	}

	@Test
	public void testMakeBedAvailable_Valid() throws BedNotFoundException {
		// Arrange
		String bedId = "bed123";
		Bed availableBed = new Bed();
		availableBed.setId(bedId);
		availableBed.setBedStatus(Bed.BedStatus.AVAILABLE);

		when(bedService.makeBedAvailable(bedId)).thenReturn(availableBed);

		// Act
		ResponseEntity<Bed> response = bedController.makeBedAvailable(bedId);

		// Assert
		assertEquals(HttpStatus.OK, response.getStatusCode());
		assertNotNull(response.getBody());
		assertEquals(bedId, response.getBody().getId());
		assertEquals(Bed.BedStatus.AVAILABLE, response.getBody().getBedStatus());
	}

	private static String asJsonString(final Object obj) {
		try {
			return new ObjectMapper().writeValueAsString(obj);
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
}
