/**
 * This class provides service methods for interacting with the Hospital API to perform operations related to hospitals.
 * It includes methods to check if a hospital exists and retrieve nearby hospitals based on a pincode.
 *
 * @author prateek
 */
package com.hms.bedms.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.web.client.RestTemplate;

import com.hms.bedms.dtos.Hospital;
import com.hms.bedms.exceptions.HospitalNotFoundException;

import java.util.List;

/**
 * The {@code HospitalApiService} class is responsible for interacting with the Hospital API.
 */
@Component
public class HospitalApiService {

    @Autowired
    private RestTemplate restTemplate;

    /**
     * Constructor for initializing the HospitalApiService with a RestTemplate instance.
     *
     * @param restTemplate The RestTemplate used for making HTTP requests to the Hospital API.
     */
    public HospitalApiService(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    /**
     * Checks if a hospital with the specified ID exists by making an API request to the Hospital API.
     *
     * @param hospitalId The unique identifier of the hospital to check.
     * @return {@code true} if the hospital exists, {@code false} if it does not.
     * @throws HospitalNotFoundException if an error occurs while checking the hospital's existence.
     */
    public boolean isHospitalFound(String hospitalId) throws HospitalNotFoundException {
        String checkHospitalUrl = "http://localhost:8080/api/hospitals/find/" + hospitalId;
        ResponseEntity<?> responseEntity = restTemplate.getForEntity(checkHospitalUrl, Hospital.class);
    	if (responseEntity.getStatusCode() == HttpStatus.OK) {
//            Hospital hospital = responseEntity.getBody();
            return true;
        } else {
        	throw new HospitalNotFoundException(hospitalId);
        }
    }

    /**
     * Retrieves a list of nearby hospitals based on the provided pincode by making an API request to the Hospital API.
     *
     * @param pincode The pincode used to find nearby hospitals.
     * @return A list of nearby hospitals.
     */
    public List<Hospital> getNearbyHospitals(Long pincode) {
        String nearbyHospitalsUrl = "http://localhost:8080/api/hospitals/nearby/" + pincode;

        ResponseEntity<List<Hospital>> responseEntity = restTemplate.exchange(
                nearbyHospitalsUrl,
                HttpMethod.GET,
                null,
                new ParameterizedTypeReference<List<Hospital>>() {}
        );
        return responseEntity.getBody();
    }
}