package com.hms.bookingms.service;

import java.util.List;
import java.util.Random;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import com.hms.bookingms.entities.Booking.BedType;

import lombok.extern.slf4j.Slf4j;

import com.hms.bookingms.dto.Bed;

@Component
@Slf4j
public class BedApiSevice {

	@Autowired
	private RestTemplate restTemplate;
	
	@Autowired
    private BedServiceClient bedServiceClient;



	public Boolean bookBed(String bedId) throws RuntimeException {
        bedServiceClient.bookBed(bedId);
	}

	public Boolean cancelBedBooking(String bedId) throws RuntimeException {
		String bookBedUrl = "http://BEDMS/api/beds/unbookBed/" + bedId;
		try {
			ResponseEntity<Void> responseEntity = restTemplate.exchange(bookBedUrl, HttpMethod.PUT, null, Void.class);
			return responseEntity.getStatusCode() != HttpStatus.OK;
		} catch (Exception e) {
			throw new RuntimeException("Error while cancelling request: " + e.getMessage());
		}
	}

	public String getRandomBedId(BedType bedType) throws RuntimeException {
		String getBedsByType = "http://BEDMS/api/beds/findByType/" + bedType;
		try {
			ResponseEntity<List<Bed>> responseEntity = restTemplate.exchange(getBedsByType, HttpMethod.GET, null,
					new ParameterizedTypeReference<List<Bed>>() {
					});
			log.info(responseEntity.toString());
			List<Bed> beds = responseEntity.getBody();
			if (beds.isEmpty()) {
				throw new Exception("No beds found for bed type: " + bedType);
			}
			int randomIndex = new Random().nextInt(beds.size());
			Bed randomBed = beds.get(randomIndex);
			return randomBed.getId();
		} catch (Exception e) {
			throw new RuntimeException("Error while checking fetching list of beds: " + e.getMessage());
		}
	}
}