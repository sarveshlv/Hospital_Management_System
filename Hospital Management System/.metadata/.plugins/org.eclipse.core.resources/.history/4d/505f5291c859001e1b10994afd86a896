//package com.hms.jwt;
//
//import java.util.Date;
//import java.util.List;
//import java.util.function.Function;
//import java.util.stream.Collectors;
//
//import org.springframework.beans.factory.annotation.Value;
//import org.springframework.security.core.Authentication;
//import org.springframework.security.core.GrantedAuthority;
//import org.springframework.security.core.userdetails.UserDetails;
//import org.springframework.stereotype.Component;
//
//import com.service.UserDetailsImpl;
//
//import io.jsonwebtoken.Claims;
//import io.jsonwebtoken.Jwts;
//import io.jsonwebtoken.SignatureAlgorithm;
//
//@Component
//public class JwtUtility {
//
//	@Value("${jwtSecret}")
//	private String jwtSecret;
//
//	@Value("${jwtExpirationMs}")
//	private int jwtExpirationMs;
//
//	public String generateToken(Authentication authentication) {
//		UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();
//		List<String> roles = userDetails.getAuthorities()
//				.stream()
//				.map(GrantedAuthority::getAuthority)
//				.collect(Collectors.toUnmodifiableList());
//		return doGenerateToken(roles, userDetails.getUsername());
//	}
//
//	private String doGenerateToken(List<String> role, String subject) {
//		return Jwts.builder()
//				.setSubject(subject)
//				.claim("role", role)
//				.setIssuedAt(new Date())
//				.setExpiration(new Date(System.currentTimeMillis() + jwtExpirationMs * 1000))
//				.signWith(SignatureAlgorithm.HS512, jwtSecret)
//				.compact();
//	}
//
//	public String getUsernameFromToken(String token) {
//		return getClaimFromToken(token, Claims::getSubject);
//	}
//
//	private Claims getAllClaimsFromToken(String token) {
//		return Jwts.parser().setSigningKey(jwtSecret).parseClaimsJws(token).getBody();
//	}
//
//	public Boolean validateToken(String token, UserDetails userDetails) {
//		final String username = getUsernameFromToken(token);
//		return (username.equals(userDetails.getUsername()) && !isTokenExpired(token));
//	}
//
//	private Boolean isTokenExpired(String token) {
//		final Date expiration = getExpirationDateFromToken(token);
//		return expiration.before(new Date());
//	}
//
//	private Date getExpirationDateFromToken(String token) {
//		return getClaimFromToken(token, Claims::getExpiration);
//	}
//
//	public <T> T getClaimFromToken(String token, Function<Claims, T> claimsResolver) {
//		final Claims claims = getAllClaimsFromToken(token);
//		return claimsResolver.apply(claims);
//	}
//}