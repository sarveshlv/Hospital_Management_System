package com.hms.authms.controller;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.web.bind.annotation.*;

import com.hms.authms.dto.UpdateUserRequest;
import com.hms.authms.dto.UserDetailsResponse;
import com.hms.authms.service.UserService;

@RestController
@RequestMapping("/api/users")
public class UserController {
	
	@Autowired
    private UserService userService;


    @PutMapping("/update")
    public ResponseEntity<UserDetailsResponse> updateUser(@RequestBody UpdateUserRequest updateUserRequest)
            throws UsernameNotFoundException {
        UserDetailsResponse userDetails = userService.updateUser(updateUserRequest);
        return ResponseEntity.ok(userDetails);
    }

    @GetMapping("/findByEmail/{email}")
    public ResponseEntity<UserDetailsResponse> getUserByEmail(@PathVariable String email)
            throws UsernameNotFoundException {
        UserDetailsResponse userDetails = userService.getUserByEmail(email);
        return ResponseEntity.ok(userDetails);
    }

    @PostMapping("/login")
    public ResponseEntity<String> login(@RequestBody AddUserRequest addUserRequest) {
        // You can implement login logic here and generate a token if authentication is successful.
        String token = userService.generateToken(addUserRequest.getEmail());
        return ResponseEntity.ok(token);
    }

    @PostMapping("/validateToken")
    public ResponseEntity<Void> validateToken(@RequestBody String token) {
        // You can implement token validation logic here.
        userService.validateToken(token);
        return ResponseEntity.ok().build();
    }
}