package com.hms.jwt;

import java.util.Date;
import java.util.function.Function;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.JwtException;
import io.jsonwebtoken.Jwts;

@Component
@SuppressWarnings("deprecation")
public class JwtUtility {

	@Value("${jwtSecret}")
	private String SECRET_KEY;

	@Value("${jwtExpirationMs}")
	private int EXPIRATION_IN_MS;

//	public Boolean validateToken(final String token, String email) {
//	      String emailFromToken = getUsernameFromToken(token);
//	      Jwts.parser().setSigningKey(SECRET_KEY).parseClaimsJws(token).getBody();
//	      return (emailFromToken.equals(email) && !isTokenExpired(token));
//		}
	
	public Boolean validateToken(final String token) {
		try {
			Jwts.parserBuilder().setSigningKey(SECRET_KEY).build().parseClaimsJws(token);
			return true && !isTokenExpired(token);
		} catch (JwtException e) {
			return false;
		}
	}

	public String getUsernameFromToken(String token) {
		return getClaimFromToken(token, Claims::getSubject);
	}

	public <T> T getClaimFromToken(String token, Function<Claims, T> claimsResolver) {
		final Claims claims = getAllClaimsFromToken(token);
		return claimsResolver.apply(claims);
	}

	private Claims getAllClaimsFromToken(String token) {
		return Jwts.parserBuilder().setSigningKey(SECRET_KEY).build().parseClaimsJws(token).getBody();
	}

	private Boolean isTokenExpired(String token) {
		final Date expiration = getExpirationDateFromToken(token);
		return expiration.before(new Date());
	}

	private Date getExpirationDateFromToken(String token) {
		return getClaimFromToken(token, Claims::getExpiration);
	}
}