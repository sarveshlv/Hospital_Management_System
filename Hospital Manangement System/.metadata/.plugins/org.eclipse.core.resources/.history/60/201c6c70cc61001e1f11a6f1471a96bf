package com.hms.userms.repository;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.data.mongo.DataMongoTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.annotation.DirtiesContext;

import com.hms.userms.entity.User;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.anyString;

@DataMongoTest
public class UserRepositoryTest {

	@Autowired
	private UserRepository userRepository;

	@MockBean
	private UserRepository userRepositoryMock;

	@Test
	public void testFindByEmail() {
		User existingUser = new User("1", "singh.prateek2599@gmail.com", "Prateek@2000", "Prateek", "Singh", "USER",
				true, "patientRef");
		Mockito.when(userRepositoryMock.findByEmail(anyString())).thenReturn(Optional.of(existingUser));

		Optional<User> actualUser = userRepository.findByEmail("singh.prateek2599@gmail.com");

		assertEquals("singh.prateek2599@gmail.com", actualUser.orElseThrow().getEmail());
	}

	@Test
	public void testFindByEmailNotFound() {
		Mockito.when(userRepositoryMock.findByEmail(anyString())).thenReturn(Optional.empty());

		// Act: Call the actual repository method
		String email = "nonexistent@example.com";
		Optional<User> user = userRepository.findByEmail(email);

		// Assert: Verify the result
		assertEquals(Optional.empty(), user);
	}
}