package com.hms.bedms.repository;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.test.context.junit.jupiter.SpringJUnitConfig;

import com.hms.bedms.entities.Bed;
import com.hms.bedms.repository.IBedRepository;

@SpringJUnitConfig
@SpringBootTest
public class BedRepositoryTests {

    @MockBean
    private IBedRepository bedRepository;

    @BeforeEach
    public void setUp() {
        // Define mock behavior for repository methods
        Bed bed1 = new Bed();
        bed1.setId("1");
        bed1.setHospitalId("Hospital1");
        bed1.setBedType(Bed.BedType.USUAL_BED);
        
        Bed bed2 = new Bed();
        bed2.setId("2");
        bed2.setHospitalId("Hospital2");
        bed2.setBedType(Bed.BedType.ICU_BED);

        when(bedRepository.findByHospitalId("Hospital1")).thenReturn(Arrays.asList(bed1));
        when(bedRepository.findByHospitalId("Hospital2")).thenReturn(Arrays.asList(bed2));
        when(bedRepository.findByBedType("USUAL_BED")).thenReturn(Arrays.asList(bed1));
        when(bedRepository.findByBedType("ICU_BED")).thenReturn(Arrays.asList(bed2));
        when(bedRepository.findById("1")).thenReturn(Optional.of(bed1));
        when(bedRepository.findById("2")).thenReturn(Optional.of(bed2));
        when(bedRepository.findById("3")).thenReturn(Optional.empty());
    }

    @Test
    public void testFindByHospitalId() {
        List<Bed> beds = bedRepository.findByHospitalId("Hospital1");
        assertEquals(1, beds.size());
        assertEquals("Hospital1", beds.get(0).getHospitalId());
    }

    @Test
    public void testFindByBedType() {
        List<Bed> beds = bedRepository.findByBedType("ICU_BED");
        assertEquals(1, beds.size());
        assertEquals(Bed.BedType.ICU_BED, beds.get(0).getBedType());
    }

    @Test
    public void testFindByIdExisting() {
        Optional<Bed> bedOptional = bedRepository.findById("1");
        assertTrue(bedOptional.isPresent());
        assertEquals("Hospital1", bedOptional.get().getHospitalId());
    }

    @Test
    public void testFindByIdNonExisting() {
        Optional<Bed> bedOptional = bedRepository.findById("3");
        assertFalse(bedOptional.isPresent());
    }

    @Test
    public void testDeleteByIdExisting() {
        assertDoesNotThrow(() -> bedRepository.deleteById("2"));
    }

    @Test
    public void testDeleteByIdNonExisting() {
        doThrow(EmptyResultDataAccessException.class).when(bedRepository).deleteById("3");
        assertThrows(EmptyResultDataAccessException.class, () -> bedRepository.deleteById("3"));
    }
}