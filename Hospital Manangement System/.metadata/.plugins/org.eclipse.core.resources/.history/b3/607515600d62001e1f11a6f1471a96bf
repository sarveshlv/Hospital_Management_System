package com.hms.bookingms.repository;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.data.mongo.DataMongoTest;
import org.springframework.boot.test.mock.mockito.MockBean;

import com.hms.bookingms.entities.Booking;

import java.util.Date;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.when;

@DataMongoTest
public class BookingRepositoryTest {

    @Mock
    private BookingRepository bookingRepository;

    @MockBean
    private BookingRepository bookingRepositoryMock;

    private Booking testBooking;

    @BeforeEach
    public void setUp() {
        // Create a sample Booking entity
        testBooking = new Booking();
        testBooking.setPatientId("patientId");
        testBooking.setHospitalId("hospitalId");
        testBooking.setBedId("bedId");
        testBooking.setBedType(Booking.BedType.USUAL_BED);
        testBooking.setBookingDate(new Date());
        testBooking.setOccupyDate(new Date());
        testBooking.setReleaseDate(new Date());
        testBooking.setBookingStatus(Booking.BookingStatus.REQUESTED);
    }

    @AfterEach
    public void tearDown() {
        // Clean up the repository after each test
        bookingRepository.deleteAll();
    }

    @Test
    public void testSaveBooking() {
        //Arrange
        Booking savedBooking = bookingRepository.save(testBooking);

        //Act
        Optional<Booking> retrievedBooking = bookingRepository.findById(savedBooking.getId());

        //Assert
        assertEquals(savedBooking, retrievedBooking.orElse(null));
    }

    @Test
    public void testFindAllByPatientId() {
        //Arrange
        bookingRepository.save(testBooking);

        // Mock the behavior of findAllByPatientId
        when(bookingRepositoryMock.findAllByPatientId(Mockito.anyString())).thenReturn(List.of(testBooking));

        // Retrieve the Booking entities by patientId using the mock repository
        List<Booking> bookings = bookingRepositoryMock.findAllByPatientId("patientId");

        // Verify that the list contains the expected Booking entity
        assertEquals(1, bookings.size());
        assertEquals(testBooking, bookings.get(0));
    }

    @Test
    public void testFindAllByHospitalId() {
        //
        bookingRepository.save(testBooking);

        // Mock the behavior of findAllByHospitalId
        when(bookingRepositoryMock.findAllByHospitalId(Mockito.anyString())).thenReturn(List.of(testBooking));

        // Retrieve the Booking entities by hospitalId using the mock repository
        List<Booking> bookings = bookingRepositoryMock.findAllByHospitalId("hospitalId");

        // Verify that the list contains the expected Booking entity
        assertEquals(1, bookings.size());
        assertEquals(testBooking, bookings.get(0));
    }
}