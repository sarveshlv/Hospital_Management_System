package com.hms.userms.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.hms.userms.dto.AddUserRequest;
import com.hms.userms.dto.UpdateUserRequest;
import com.hms.userms.dto.UserDetails;
import com.hms.userms.entity.User;
import com.hms.userms.exception.UserNotFoundException;
import com.hms.userms.repository.UserRepository;

@Service
public class UserService implements IUserService {

	@Autowired
	private UserRepository userRepository;

	@Autowired
	private PasswordEncoder passwordEncoder;

	@Override
	public UserDetails saveUser(AddUserRequest addUserRequest) {
		User user = new User();
		user.setFirstName(addUserRequest.getFirstName());
		user.setLastName(addUserRequest.getLastName());
		user.setEmail(addUserRequest.getEmail());
		user.setRole(addUserRequest.getRole());
		user.setPassword(passwordEncoder.encode(addUserRequest.getPassword()));

		return userRepository.save(user);
	}

	@Override
	public UserDetails updateUser(UpdateUserRequest updateUserRequest) throws UserNotFoundException {
		User user = getUserByEmail(updateUserRequest.getEmail());

		user.setFirstName(updateUserRequest.getFirstName());
		user.setLastName(updateUserRequest.getLastName());
		user.setPassword(passwordEncoder.encode(updateUserRequest.getPassword()));
		userRepository.save(user);

		return userRepository.save(user);
	}

	@Override
	public UserDetails getUserByEmail(String email) throws UserNotFoundException {
		return userRepository.findByEmail(email).orElseThrow(() -> new UserNotFoundException(email));
	}

	@Override
	public UserDetails addReferenceId(String email, String referenceId) throws UserNotFoundException {
		User user = getUserByEmail(email);
		user.setReferenceId(referenceId);
		
		userRepository.save(user);
		return UserDetails.getUserDetailsResponse(user);
	}

	public static UserDetails getUserDetailsResponse(User user) {

		UserDetails userDetailsResponse = new UserDetails();
		userDetailsResponse.setId(user.getId());
		userDetailsResponse.setFirstName(user.getFirstName());
		userDetailsResponse.setLastName(user.getLastName());
		userDetailsResponse.setEmail(user.getEmail());
		userDetailsResponse.setRole(user.getRole());

		return userDetailsResponse;
	}
}
