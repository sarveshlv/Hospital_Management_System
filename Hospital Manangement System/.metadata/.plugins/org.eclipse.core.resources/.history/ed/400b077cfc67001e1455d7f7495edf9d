package com.hms.billingms.controller;

import com.hms.billingms.dto.BillingRequest;
import com.hms.billingms.entities.Billing;
import com.hms.billingms.exceptions.BillingNotFoundException;
import com.hms.billingms.service.IBillingService;
import com.razorpay.RazorpayClient;
import com.razorpay.RazorpayException;
import com.razorpay.Order;

import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/billings")
public class BillingController {

	@Autowired
	private IBillingService billingService;

	@Value("${rzp.key.id}")
	private String key_Id;

	@Value("${rzp.key.secret}")
	private String key_Secret;

	@Value("${rzp.currency}")
	private String currency;

	@Value("${rzp.company.name}")
	private String company;

	@PostMapping("/add")
	public Billing addBilling(@RequestHeader("Authorization") String authorizationHeader,
			@RequestBody BillingRequest billingRequest) throws BillingNotFoundException {
		return billingService.generateBill(authorizationHeader, billingRequest.getBookingId());
	}

	@GetMapping("/findById/{billingId}")
	public Billing getBillingById(@PathVariable String billingId) throws BillingNotFoundException {
		return billingService.findById(billingId);
	}

	@GetMapping("/findByBookingId/{bookingId}")
	public Billing getBillingByBookingId(@PathVariable String bookingId) {
		return billingService.findByBookingId(bookingId);
	}

	@GetMapping("/pay/{billingId}")
	public Order payment(@PathVariable String billingId) throws RazorpayException, RuntimeException {
		try {
			Billing billing = billingService.findById(billingId);
			if (billing.getPaymentStatus() == Billing.PaymentStatus.COMPLETED) {
				throw new RuntimeException("Billing status is not COMPLETED");
			}

			RazorpayClient razorpay = new RazorpayClient(key_Id, key_Secret);
			JSONObject orderRequest = new JSONObject();
			orderRequest.put("amount", billing.getBillAmount());
			orderRequest.put("currency", currency);
			orderRequest.put("receipt", billing.getId());

			Order order = razorpay.orders.create(orderRequest);
			return order;
		} catch (RazorpayException e) {
			throw new RuntimeException(e.getMessage());
		}
	}
//		Payment payment = paypalService.createPayment(billing.getBillAmount(), "USD", "paypal", "sale",
//				"Booking Charges", "http://localhost:8500/api/billings/pay/success/" + billingId,
//				"http://localhost:8500/api/billings/pay/cancel/" + billingId);
//
//		log.info("Links: {}", payment.getLinks().toString());
//		for (Links link : payment.getLinks()) {
//			if (link.getRel().equals("approval_url")) {
//				return link.getHref();
//			}
//		}
//		return "";
//	}

//	@GetMapping(value = CANCEL_URL)
//	public String cancelPay() {
//		throw new RuntimeException("Payment was canceled.");
//	}

//	@GetMapping(value = SUCCESS_URL)
//	public Billing successPay(@PathVariable String billingId, @RequestParam("paymentId") String paymentId, @RequestParam("PayerID") String payerId) throws PayPalRESTException {
//		Payment payment = paypalService.executePayment(paymentId, payerId);
//		
//		
//		log.info("Payment details: {}", payment.toJSON());
//		if (payment.getState().equals("approved")) {
//			Billing billing = billingService.findById(billingId);
//			billing.setPaymentStatus(Billing.PaymentStatus.COMPLETED);	
//			return billingService.addBill(billing);
//		} else {
//			throw new RuntimeException("Payment was not approved.");
//		}
//
//	}
}
