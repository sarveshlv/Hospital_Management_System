package com.hms.userms.repository;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.data.mongo.DataMongoTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.test.annotation.DirtiesContext;

import com.hms.userms.entity.User;

import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.ArgumentMatchers.anyString;

@DataMongoTest
@DirtiesContext(classMode = DirtiesContext.ClassMode.AFTER_EACH_TEST_METHOD)
public class UserRepositoryTest {

    @Autowired
    private UserRepository userRepository;

    @MockBean
    private UserRepository userRepositoryMock;

    @Autowired
    private MongoTemplate mongoTemplate;

    @BeforeEach
    public void setUp() {
        // Initialize mock behavior for findByEmail
        Mockito.when(userRepositoryMock.findByEmail(anyString()))
               .thenReturn(Optional.of(new User("1", "test@example.com", "password", "John", "Doe", "USER", true, "ref1")));
    }

    @AfterEach
    public void tearDown() {
        // Delete the test user from the database after each test
        mongoTemplate.remove(userRepository.findByEmail("test@example.com").orElse(null));
    }

    @Test
    public void testFindByEmail() {
        String email = "test@example.com";
        Optional<User> user = userRepository.findByEmail(email);

        // Assert that the user with the given email is found
        assertEquals(email, user.orElseThrow().getEmail());
    }

    @Test
    public void testFindByEmailNotFound() {
        String email = "nonexistent@example.com";
        Optional<User> user = userRepository.findByEmail(email);

        // Assert that the user with the given email is not found
        assertEquals(Optional.empty(), user);
    }
}